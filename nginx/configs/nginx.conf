user  nginx;
worker_processes  auto;
worker_rlimit_nofile 65535;

### load NGINX App Protect WAF and Bot Protection - this is not needed for NGINX App Protect DoS
# load_module modules/ngx_http_app_protect_module.so;

### load NGINX App Protect DoS
load_module modules/ngx_http_app_protect_dos_module.so;

### load njs module
# load_module modules/ngx_http_js_module.so;

### load GeoIP modules
load_module modules/ngx_http_geoip2_module.so;
load_module modules/ngx_stream_geoip2_module.so;

### load Lua modules
# load_module modules/ndk_http_module.so;
# load_module modules/ngx_http_lua_module.so;


error_log  /var/log/nginx/error.log debug;
pid        /var/run/nginx.pid;


events {
    worker_connections  65536;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    ### key-value pairs for Canary A/B testing
    # keyval_zone zone=split:64k state=/etc/nginx/conf.d/split.json;
    # keyval      $host $split_level zone=split;

    # split_clients $unique_client_identifier $split0 {
        # *   canary-a;
    # }
    # split_clients $unique_client_identifier $split25 {
        # 25% canary-b;
        # *   canary-a;
    # }
    # split_clients $unique_client_identifier $split50 {
        # 50% canary-b;
        # *   canary-a;
    # }
    # split_clients $unique_client_identifier $split75 {
        # 75% canary-b;
        # *   canary-a;
    # }
    # split_clients $unique_client_identifier $split100 {
        # *   canary-b;
    # }

    ### diA cookie for F5XC ATI
    # map $cookie__imp_apg_r_ $dia {
          # "~*(.+)(diA%22%3A%22)(?<found>.+)(%22%2C%22)" $found;
          # default "unset";
    # }

    ### diB cookie for F5XC ATI
    # map $cookie__imp_apg_r_ $dib {
          # "~*(.+)(diB%22%3A%22)(?<p>.+)(%22%7D)" $p;
          # default "unset";
    # }

    ### Connection upgrade for MQTT
    # map $http_upgrade $connection_upgrade {
        # default upgrade;
        # '' close;
    # }

    # map $split_level $canary {
        # 0       $split0;
        # 25      $split25;
        # 50      $split50;
        # 75      $split75;
        # 100     $split100;
        # default $split50;
    # }

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    ### log format for adding F5XC ATI information in access logs
    # log_format security '$remote_addr - $remote_user [$time_local] '
                        # '"$request" $status $body_bytes_sent '
                        # '"$http_referer" "$http_user_agent" "$cookie__imp_apg_r_" "$cookie__imp_di_pc_"';

    ### log format for adding diA and diB information from F5XC ATI in access logs
    # log_format f5xc_ati '$remote_addr - $remote_user [$time_local] '
                        # '"$request" $status $body_bytes_sent '
                        # '"$http_referer" "$http_user_agent" "$cookie__imp_apg_r_" "$dia" "$dib"';

    ### log format for MQTT connections
    # log_format  mqtt '$remote_addr - [$time_local] "$status"';

    ### log format for access logs in JSON format - for parsing with Grafana, etc.
    log_format json_analytics escape=json '{'
                    '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
                    '"connection": "$connection", ' # connection serial number
                    '"connection_requests": "$connection_requests", ' # number of requests made in connection
                    '"pid": "$pid", ' # process pid
                    '"request_id": "$request_id", ' # the unique request id
                    '"request_length": "$request_length", ' # request length (including headers and body)
                    '"remote_addr": "$remote_addr", ' # client IP
                    '"remote_user": "$remote_user", ' # client HTTP username
                    '"remote_port": "$remote_port", ' # client port
                    '"time_local": "$time_local", '
                    '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
                    '"request": "$request", ' # full path no arguments if the request
                    '"request_uri": "$request_uri", ' # full path and arguments if the request
                    '"args": "$args", ' # args
                    '"status": "$status", ' # response status code
                    '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
                    '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
                    '"http_referer": "$http_referer", ' # HTTP referer
                    '"http_user_agent": "$http_user_agent", ' # user agent
                    '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
                    '"http_host": "$http_host", ' # the request Host: header
                    '"server_name": "$server_name", ' # the name of the vhost serving the request
                    '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
                    '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
                    '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
                    '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
                    '"upstream_response_time": "$upstream_response_time", ' # time spent receiving upstream body
                    '"upstream_response_length": "$upstream_response_length", ' # upstream response length
                    '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
                    '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
                    '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
                    '"scheme": "$scheme", ' # http or https
                    '"request_method": "$request_method", ' # request method
                    '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
                    '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
                    '"gzip_ratio": "$gzip_ratio"'
                '}';
    # access_log  /var/log/nginx/access.log  main;
    access_log  /var/log/nginx/json_access.log  json_analytics;

    ### GeoIP databases must be downloaded after registration at https://maxmind.com
    geoip2 /etc/nginx/geoip/GeoLite2-Country.mmdb {
        $geoip_country_code default=US source=$remote_addr country iso_code;
    }

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    ### include NGINX conf files for Virtual hosts in /etc/nginx/conf.d/
    include /etc/nginx/conf.d/*.conf;

    ### NGINX App Protect WAF configuration - this is not needed to use NGINX App Protect DoS
    # app_protect_enable on;
    # app_protect_policy_file /etc/app_protect/conf/nap_policy_waf.json;
    # app_protect_security_log_enable on;
    # app_protect_security_log "/etc/app_protect/conf/app-protect-waf-log-policy.json" /var/log/nginx/nap-waf.log;
    # app_protect_security_log "/etc/app_protect/conf/app-protect-waf-log-policy.json" syslog:server=127.0.0.1:5144;

    ### NGINX App Protect DoS configuration - can run without NGINX App Protect WAF module and configuration
    app_protect_dos_enable on;
    app_protect_dos_policy_file /etc/app_protect_dos/conf/nap_policy_dos.json; ### DoS policy configuration file
    app_protect_dos_security_log_enable on;
    app_protect_dos_security_log "/etc/app_protect_dos/conf/app-protect-dos-log-policy.json" /var/log/nginx/nap-dos.log; ### DoS logging configuration and output files
    app_protect_dos_accelerated_mitigation on syn_drop=on; ### Enable eBPF for SYN-flood attacks seen in NGINX App Protect DoS

    # app traffic insight config
    js_import apg from /var/www/js/bas-nginx.js;
    js_var $ati_id "volt-volterra_savqwqpc-26768971";
}

stream {
    server {
        listen 8883 ssl;
        listen [::]:8883 ssl;

        # access_log /var/log/nginx/mqtt.f5labs.dev-access.log main;
        # error_log /var/log/nginx/mqtt.f5labs.dev-error.log debug;

        ssl_certificate /etc/letsencrypt/live/f5labs.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/f5labs.dev/privkey.pem;

        ssl_protocols TLSv1.2;

        proxy_pass localhost:1883;
        proxy_connect_timeout 1s;
    }
}
